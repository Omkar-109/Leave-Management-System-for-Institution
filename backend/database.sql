-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."adminActions"
(
    action_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    admin_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    action_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    action_details character varying(100) COLLATE pg_catalog."default",
    action_date date NOT NULL,
    CONSTRAINT "adminActions_pkey" PRIMARY KEY (action_id)
);

CREATE TABLE IF NOT EXISTS public.admins
(
    admin_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT admins_pkey PRIMARY KEY (admin_id)
);

CREATE TABLE IF NOT EXISTS public.credentials
(
    credential_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT credentials_pkey PRIMARY KEY (credential_id),
    CONSTRAINT email UNIQUE (email)
);

COMMENT ON COLUMN public.credentials.employee_id
    IS 'admin_id or employee_id depending of type of user';

CREATE TABLE IF NOT EXISTS public.employee_phones
(
    phone_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default",
    leave_id character varying(10) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default" NOT NULL,
    created_at date,
    CONSTRAINT employee_phones_pkey PRIMARY KEY (phone_id)
);

CREATE TABLE IF NOT EXISTS public.employee_program
(
    employees_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    program_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    created_at date DEFAULT CURRENT_DATE,
    CONSTRAINT employee_program_pkey PRIMARY KEY (employees_id, program_id)
);

CREATE TABLE IF NOT EXISTS public.employeeaddresses
(
    address_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default",
    leave_id character varying(10) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT "employeeAddresses_pkey" PRIMARY KEY (address_id)
);

CREATE TABLE IF NOT EXISTS public.employees
(
    employees_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    date_of_joining date NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT employees_pkey PRIMARY KEY (employees_id)
);

CREATE TABLE IF NOT EXISTS public.leave
(
    leave_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    start_date date NOT NULL,
    end_date date,
    leave_type character varying COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    reason character varying(400) COLLATE pg_catalog."default" NOT NULL,
    program_director_status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    dean_status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    created_at date,
    updated_at date,
    supporting_document bytea,
    document_name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT leave_pkey PRIMARY KEY (leave_id)
);

CREATE TABLE IF NOT EXISTS public.leaveapprovalworkflow
(
    workflow_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    leave_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    approver_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    role character varying(20) COLLATE pg_catalog."default" NOT NULL,
    action character varying(20) COLLATE pg_catalog."default",
    reason character varying(200) COLLATE pg_catalog."default",
    note character varying(200) COLLATE pg_catalog."default",
    action_date character varying COLLATE pg_catalog."default",
    CONSTRAINT "leaveApprovalWorkflow_pkey" PRIMARY KEY (workflow_id)
);

COMMENT ON COLUMN public.leaveapprovalworkflow.role
    IS 'dean or program director';

CREATE TABLE IF NOT EXISTS public.leaverecords
(
    record_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    leave_type character varying(50) COLLATE pg_catalog."default",
    leaves_taken numeric(5, 0),
    leaves_added numeric(5, 0),
    balance_adjustment numeric(5, 0),
    leaves_remaining numeric(5, 0),
    updated_at date,
    CONSTRAINT "leaveRecords_pkey" PRIMARY KEY (record_id)
);

CREATE TABLE IF NOT EXISTS public.leavetypes
(
    leave_type_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    faculty_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    leave_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    number_of_leaves numeric(5, 0) NOT NULL,
    reset_frequency numeric(5, 0),
    reset_date date,
    created_at date NOT NULL,
    CONSTRAINT "leaveTypes_pkey" PRIMARY KEY (leave_type_id)
);

CREATE TABLE IF NOT EXISTS public.program_school
(
    program_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    school_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    created_at date DEFAULT CURRENT_DATE,
    CONSTRAINT program_school_pkey PRIMARY KEY (program_id, school_id)
);

CREATE TABLE IF NOT EXISTS public.programs
(
    program_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    program_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT programs_pkey PRIMARY KEY (program_id)
);

CREATE TABLE IF NOT EXISTS public.rolecredentials
(
    role_credentials_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    role_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    managed_entity_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT "roleCredentials_pkey" PRIMARY KEY (role_credentials_id)
);

COMMENT ON COLUMN public.rolecredentials.role_type
    IS 'dean or program director';

COMMENT ON COLUMN public.rolecredentials.managed_entity_id
    IS 'the id of school or program from those tables';

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    employee_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    role_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    manages character varying(50) COLLATE pg_catalog."default" NOT NULL,
    managed_entity_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS public.schools
(
    school_id character varying(10) COLLATE pg_catalog."default" NOT NULL,
    school_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at date NOT NULL,
    CONSTRAINT schools_pkey PRIMARY KEY (school_id)
);

ALTER TABLE IF EXISTS public."adminActions"
    ADD CONSTRAINT admin_id FOREIGN KEY (action_id)
    REFERENCES public.admins (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS "adminActions_pkey"
    ON public."adminActions"(action_id);


ALTER TABLE IF EXISTS public.credentials
    ADD CONSTRAINT credentials_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_phones
    ADD CONSTRAINT employee_phones_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_phones
    ADD CONSTRAINT employee_phones_leave_id_fkey FOREIGN KEY (leave_id)
    REFERENCES public.leave (leave_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_program
    ADD CONSTRAINT fk_employee FOREIGN KEY (employees_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.employee_program
    ADD CONSTRAINT fk_program FOREIGN KEY (program_id)
    REFERENCES public.programs (program_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.employeeaddresses
    ADD CONSTRAINT employee_id FOREIGN KEY (employee_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employeeaddresses
    ADD CONSTRAINT leave_id FOREIGN KEY (leave_id)
    REFERENCES public.leave (leave_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.leave
    ADD CONSTRAINT employee_id FOREIGN KEY (employee_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.leaveapprovalworkflow
    ADD CONSTRAINT "leaveApprovalWorkflow_approver_id_fkey" FOREIGN KEY (approver_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.leaveapprovalworkflow
    ADD CONSTRAINT "leaveApprovalWorkflow_leave_id_fkey" FOREIGN KEY (leave_id)
    REFERENCES public.leave (leave_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.leaverecords
    ADD CONSTRAINT "leaveRecords_employee_id_fkey" FOREIGN KEY (employee_id)
    REFERENCES public.employees (employees_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.program_school
    ADD CONSTRAINT fk_program FOREIGN KEY (program_id)
    REFERENCES public.programs (program_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.program_school
    ADD CONSTRAINT fk_school FOREIGN KEY (school_id)
    REFERENCES public.schools (school_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;